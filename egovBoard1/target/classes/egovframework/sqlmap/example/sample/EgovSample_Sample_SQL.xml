<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="Sample">
	<typeAlias  alias="egovMap" type="egovframework.rte.psl.dataaccess.util.EgovMap"/>
	<typeAlias  alias="searchVO" type="egovframework.example.sample.service.SampleDefaultVO"/>

	<resultMap id="board" class="egovframework.example.sample.service.BoardVO">
		<result property="idx" column="idx"/>
		<result property="title" column="title"/>
		<result property="writer" column="writer"/>
		<result property="content" column="content"/>
		<result property="regDate" column="reg_date"/>
		<result property="cnt" column="cnt"/>
		<result property="option" column="option"/>
		<result property="setting" column="setting"/>
		<result property="link1" column="link1"/>
		<result property="link2" column="link2"/>
	</resultMap>
	
	<resultMap id="reply" class="egovframework.example.sample.service.ReplyVO">
		<result property="replyIdx" column="reply_idx"/>
		<result property="idx" column="idx"/>
		<result property="writer" column="writer"/>
		<result property="regDate" column="reg_date"/>
	</resultMap>
	
	<resultMap id="login" class="egovframework.example.sample.service.LoginVO">
		<result property="id" column="id" nullValue="no"/>
		<result property="password" column="password" nullValue="no"/>
		<result property="name" column="name" nullValue="no"/>
	</resultMap>
	
	<select id="sampleDAO.getBoardList" resultClass="egovMap">
			SELECT A.*, B.replyCnt
			FROM board_list A
			LEFT JOIN (SELECT idx, count(*) as replyCnt FROM board_reply GROUP BY idx ORDER BY idx DESC) B
			ON A.idx = B.idx 
			WHERE setting NOT IN ('notice') 
			<isNotNull property="menu">
				<isNotEmpty property="menu">
				<isNotEqual property="menu" compareValue="all">
					AND setting IN (#menu#)
				</isNotEqual>
				</isNotEmpty>
			</isNotNull>
			ORDER BY idx DESC LIMIT #limit# OFFSET #offset#
	</select>
	
	<select id="sampleDAO.getBoardListBySearch" resultClass="egovMap">
			SELECT A.*, B.replyCnt
			FROM board_list A
			LEFT JOIN (SELECT idx, count(*) as replyCnt FROM board_reply GROUP BY idx ORDER BY idx DESC) B
			ON A.idx = B.idx 
			WHERE setting NOT IN ('notice') 
			<isNotNull property="menu">
				<isNotEmpty property="menu">
				<isNotEqual property="menu" compareValue="all">
					AND setting IN (#menu#)
				</isNotEqual>
				</isNotEmpty>
			</isNotNull>
			<isNotEmpty property="searchType">
				<isEqual property="searchType" compareValue="titleOrContent">
					AND (title LIKE concat('%', #searchValue#, '%') OR content LIKE concat('%', #searchValue#, '%'))
				</isEqual>
				<isEqual property="searchType" compareValue="writer">
					AND writer = #searchValue#
				</isEqual>
				<isEqual property="searchType" compareValue="title">
					AND title LIKE concat('%', #searchValue#, '%')
				</isEqual>
				<isEqual property="searchType" compareValue="content">
					AND content LIKE concat('%', #searchValue#, '%')
				</isEqual>
			</isNotEmpty>
			ORDER BY idx DESC LIMIT #limit# OFFSET #offset#
	</select>
	
	<select id="sampleDAO.getNoticeList" resultClass="egovMap">
		<![CDATA[
			SELECT A.*, B.replyCnt
			FROM board_list A
			LEFT JOIN (SELECT idx, count(*) as replyCnt FROM board_reply GROUP BY idx ORDER BY idx DESC) B
			ON A.idx = B.idx WHERE setting IN ('notice') ORDER BY idx DESC
		]]>
	</select>
	
	<select id="sampleDAO.getNonNoticeBoardCnt" resultClass="Integer">
		SELECT count(*) as cnt
		FROM board_list A
		LEFT JOIN (SELECT idx, count(*) as replyCnt FROM board_reply GROUP BY idx ORDER BY idx DESC) B
		ON A.idx = B.idx 
		WHERE setting NOT IN ('notice') 
		<isNotNull property="menu">
			<isNotEmpty property="menu">
			<isNotEqual property="menu" compareValue="all">
				AND setting IN (#menu#)
			</isNotEqual>
			</isNotEmpty>
		</isNotNull>
		<isNotEmpty property="searchType">
			<isEqual property="searchType" compareValue="titleOrContent">
				AND (title LIKE concat('%', #searchValue#, '%') OR content LIKE concat('%', #searchValue#, '%'))
			</isEqual>
			<isEqual property="searchType" compareValue="writer">
				AND writer = #searchValue#
			</isEqual>
			<isEqual property="searchType" compareValue="title">
				AND title LIKE concat('%', #searchValue#, '%')
			</isEqual>
			<isEqual property="searchType" compareValue="content">
				AND content LIKE concat('%', #searchValue#, '%')
			</isEqual>
		</isNotEmpty>
	</select>
	
	<select id="sampleDAO.getReplyList" resultClass="egovMap">
		<![CDATA[
			SELECT *
			FROM board_reply 
			WHERE idx=#idx# 
			ORDER BY reg_date ASC
		]]>
	</select>
	
	<select id="sampleDAO.selectBoardByIdx" resultMap="board">
		<![CDATA[
			SELECT *
            FROM board_list
            WHERE idx=#idx#
		]]>
	</select>
	
	<insert id="sampleDAO.insertBoard">
		<![CDATA[
			INSERT INTO board_list 
				( writer
				  , title
				  , content
				  , option
				  , setting
				  , link1
				  , link2
				 )
			VALUES ( #writer#
					  , #title#
					  , #content#
					  , #option#
					  , #setting#
					  , #link1#
				  	  , #link2#
					  )
		]]>
	</insert>

	<insert id="sampleDAO.insertReply">
		<![CDATA[
			INSERT INTO board_reply 
				( idx 
				  , writer
				  , reply
				 )
			VALUES ( #idx#
					  , #writer#
					  , #reply#
					  )
		]]>
	</insert>
	
	<select id="sampleDAO.selectBoard" resultMap="board">
        
            SELECT *
            FROM board_list
            WHERE idx=#idx#
       
    </select>

	<update id="sampleDAO.updateBoard">
		<![CDATA[
			UPDATE board_list
			SET title=#title#
				, content=#content#
				, setting=#setting#
				, link1=#link1#
				, link2=#link2#
			WHERE idx=#idx#
		]]>
	</update>
	
	<delete id="sampleDAO.deleteBoard">
		DELETE FROM board_list WHERE idx=#idx#
	</delete>
	
	<update id="sampleDAO.updateIdx">
		ALTER TABLE board_list AUTO_INCREMENT=1;
		SET @COUNT = 0;
		UPDATE board_list SET idx = @COUNT:=@COUNT+1;
	</update>
	
	<delete id="sampleDAO.deleteReply">
		DELETE FROM board_reply 
		WHERE reply_idx=#replyIdx#;
	</delete>
	
	<update id="sampleDAO.updateReply">
		UPDATE board_reply
		SET reply=#reply#
		WHERE reply_idx=#replyIdx#
	</update>
	
	<update id="sampleDAO.updateCount">
		UPDATE board_list
		SET cnt=#cnt#
		WHERE idx=#idx#
	</update>
	
	<select id="sampleDAO.getName" resultClass="String">
		SELECT IFNULL(MAX(name), 'noName') AS name
		FROM board_user
		WHERE id=#id# AND password=#password#
	</select>
	
	<select id="sampleDAO.getUser" resultMap="login">
		SELECT *
		FROM board_user
		WHERE id=#id# AND name=#name#
	</select>
	
	<select id="sampleDAO.getIdxCnt" resultClass="String">
		SELECT COUNT(*)
		FROM board_list;
	</select>
	
	<select id="sampleDAO.getBeforeBoard" resultClass="Integer">
		SELECT idx
		FROM board_list
		<![CDATA[
		WHERE idx < #idx#
		]]>
		<isNotNull property="menu">
			<isNotEmpty property="menu">
			<isNotEqual property="menu" compareValue="all">
				AND setting IN (#menu#)
			</isNotEqual>
			</isNotEmpty>
		</isNotNull>
		ORDER BY idx DESC LIMIT 1;
	</select>
	
	<select id="sampleDAO.getAfterBoard" resultClass="Integer">
		SELECT idx
		FROM board_list
		<![CDATA[
		WHERE idx > #idx#
		]]>
		<isNotNull property="menu">
			<isNotEmpty property="menu">
			<isNotEqual property="menu" compareValue="all">
				AND setting IN (#menu#)
			</isNotEqual>
			</isNotEmpty>
		</isNotNull>
		LIMIT 1;
	</select>
	
	<select id="sampleDAO.checkId" resultClass="String">
		SELECT id
		FROM board_user
		WHERE id = #id#
	</select>
	
	<insert id="sampleDAO.joinUser">
		INSERT INTO board_user
		(id, password, name)
		VALUES (#id#, #password#, #name#)
	</insert>
	
	<!-- =================================================================================================== -->
	<select id="sampleDAO.selectSampleListTotCnt" parameterClass="searchVO" resultClass="int">

			SELECT COUNT(*) totcnt
			FROM SAMPLE
			WHERE 1=1
			<isEqual prepend="AND" property="searchCondition" compareValue="0">
				ID LIKE '%' || #searchKeyword# || '%'
			</isEqual>
			<isEqual prepend="AND" property="searchCondition" compareValue="1">
				NAME LIKE '%' || #searchKeyword# || '%'
			</isEqual>
	</select>

</sqlMap>
